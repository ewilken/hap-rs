// this file is auto-generated by hap-codegen

use serde::{
    de::{self, Deserialize, Deserializer},
    ser::{Serialize, Serializer},
};
use std::str::FromStr;

use crate::Error;

/// HAP Service and Characteristic type representation.
#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
pub enum HapType {
    Unknown,
	AccessoryFlags,
	Active,
	ActiveIdentifier,
	AdministratorOnlyAccess,
	AirParticulateDensity,
	AirParticulateSize,
	AirQuality,
	AudioFeedback,
	BatteryLevel,
	Brightness,
	CarbonDioxideDetected,
	CarbonDioxideLevel,
	CarbonDioxidePeakLevel,
	CarbonMonoxideDetected,
	CarbonMonoxideLevel,
	CarbonMonoxidePeakLevel,
	ChargingState,
	ClosedCaptions,
	ConfiguredName,
	DisplayOrder,
	ColorTemperature,
	ContactSensorState,
	CoolingThresholdTemperature,
	CurrentAirPurifierState,
	CurrentAmbientLightLevel,
	CurrentDoorState,
	CurrentFanState,
	CurrentHeaterCoolerState,
	CurrentHeatingCoolingState,
	CurrentHorizontalTiltAngle,
	CurrentHumidifierDehumidifierState,
	CurrentMediaState,
	TargetMediaState,
	CurrentPosition,
	CurrentRelativeHumidity,
	CurrentSlatState,
	CurrentTemperature,
	CurrentTiltAngle,
	CurrentVerticalTiltAngle,
	DigitalZoom,
	FilterChangeIndication,
	FilterLifeLevel,
	FirmwareRevision,
	HardwareRevision,
	HeatingThresholdTemperature,
	HoldPosition,
	Hue,
	Identify,
	InputSourceType,
	InputDeviceType,
	Identifier,
	CurrentVisibilityState,
	TargetVisibilityState,
	ImageMirroring,
	ImageRotation,
	InUse,
	IsConfigured,
	LeakDetected,
	LockControlPoint,
	LockCurrentState,
	LockLastKnownAction,
	LockManagementAutoSecurityTimeout,
	LockPhysicalControls,
	LockTargetState,
	Logs,
	Manufacturer,
	Model,
	MotionDetected,
	Mute,
	Name,
	NightVision,
	NitrogenDioxideDensity,
	ObstructionDetected,
	OccupancyDetected,
	On,
	OpticalZoom,
	OutletInUse,
	OzoneDensity,
	PairSetup,
	PairVerify,
	PairingFeatures,
	PairingPairings,
	Pm10Density,
	Pm2_5Density,
	PositionState,
	PictureMode,
	PowerModeSelection,
	ProgramMode,
	ProgrammableSwitchEvent,
	RemoteKey,
	RelativeHumidityDehumidifierThreshold,
	RelativeHumidityHumidifierThreshold,
	RemainingDuration,
	ResetFilterIndication,
	RotationDirection,
	RotationSpeed,
	Saturation,
	SecuritySystemAlarmType,
	SecuritySystemCurrentState,
	SecuritySystemTargetState,
	SelectedRtpStreamConfiguration,
	SerialNumber,
	ServiceLabelIndex,
	ServiceLabelNamespace,
	SetDuration,
	SetupEndpoints,
	SlatType,
	SleepDiscoveryMode,
	SmokeDetected,
	StatusActive,
	StatusFault,
	StatusJammed,
	StatusLowBattery,
	StatusTampered,
	StreamingStatus,
	SulphurDioxideDensity,
	SupportedAudioStreamConfiguration,
	SupportedRtpConfiguration,
	SupportedVideoStreamConfiguration,
	SwingMode,
	TargetAirPurifierState,
	TargetAirQuality,
	TargetDoorState,
	TargetFanState,
	TargetHeaterCoolerState,
	TargetHeatingCoolingState,
	TargetHorizontalTiltAngle,
	TargetHumidifierDehumidifierState,
	TargetPosition,
	TargetRelativeHumidity,
	TargetSlatState,
	TargetTemperature,
	TargetTiltAngle,
	TargetVerticalTiltAngle,
	TemperatureDisplayUnits,
	ValveType,
	Version,
	VocDensity,
	Volume,
	VolumeControlType,
	VolumeSelector,
	WaterLevel,
	SupportedCameraRecordingConfiguration,
	SupportedVideoRecordingConfiguration,
	SupportedAudioRecordingConfiguration,
	SelectedCameraRecordingConfiguration,
	AccessoryInformation,
	AirPurifier,
	AirQualitySensor,
	BatteryService,
	CameraRtpStreamManagement,
	CarbonDioxideSensor,
	CarbonMonoxideSensor,
	ContactSensor,
	Door,
	Doorbell,
	Fan,
	FanV2,
	FilterMaintenance,
	Faucet,
	GarageDoorOpener,
	HeaterCooler,
	HumidifierDehumidifier,
	HumiditySensor,
	IrrigationSystem,
	LeakSensor,
	LightSensor,
	Lightbulb,
	LockManagement,
	LockMechanism,
	Microphone,
	MotionSensor,
	OccupancySensor,
	Outlet,
	SecuritySystem,
	ServiceLabel,
	Slat,
	SmokeSensor,
	Speaker,
	StatelessProgrammableSwitch,
	Switch,
	TemperatureSensor,
	Thermostat,
	Valve,
	Window,
	WindowCovering,
	Television,
	InputSource,
}

impl ToString for HapType {
    fn to_string(&self) -> String {
        match self {
            HapType::Unknown => "unknown".into(),
			HapType::AccessoryFlags => "A6".into(),
			HapType::Active => "B0".into(),
			HapType::ActiveIdentifier => "E7".into(),
			HapType::AdministratorOnlyAccess => "1".into(),
			HapType::AirParticulateDensity => "64".into(),
			HapType::AirParticulateSize => "65".into(),
			HapType::AirQuality => "95".into(),
			HapType::AudioFeedback => "5".into(),
			HapType::BatteryLevel => "68".into(),
			HapType::Brightness => "8".into(),
			HapType::CarbonDioxideDetected => "92".into(),
			HapType::CarbonDioxideLevel => "93".into(),
			HapType::CarbonDioxidePeakLevel => "94".into(),
			HapType::CarbonMonoxideDetected => "69".into(),
			HapType::CarbonMonoxideLevel => "90".into(),
			HapType::CarbonMonoxidePeakLevel => "91".into(),
			HapType::ChargingState => "8F".into(),
			HapType::ClosedCaptions => "DD".into(),
			HapType::ConfiguredName => "E3".into(),
			HapType::DisplayOrder => "136".into(),
			HapType::ColorTemperature => "CE".into(),
			HapType::ContactSensorState => "6A".into(),
			HapType::CoolingThresholdTemperature => "D".into(),
			HapType::CurrentAirPurifierState => "A9".into(),
			HapType::CurrentAmbientLightLevel => "6B".into(),
			HapType::CurrentDoorState => "E".into(),
			HapType::CurrentFanState => "AF".into(),
			HapType::CurrentHeaterCoolerState => "B1".into(),
			HapType::CurrentHeatingCoolingState => "F".into(),
			HapType::CurrentHorizontalTiltAngle => "6C".into(),
			HapType::CurrentHumidifierDehumidifierState => "B3".into(),
			HapType::CurrentMediaState => "E0".into(),
			HapType::TargetMediaState => "137".into(),
			HapType::CurrentPosition => "6D".into(),
			HapType::CurrentRelativeHumidity => "10".into(),
			HapType::CurrentSlatState => "AA".into(),
			HapType::CurrentTemperature => "11".into(),
			HapType::CurrentTiltAngle => "C1".into(),
			HapType::CurrentVerticalTiltAngle => "6E".into(),
			HapType::DigitalZoom => "11D".into(),
			HapType::FilterChangeIndication => "AC".into(),
			HapType::FilterLifeLevel => "AB".into(),
			HapType::FirmwareRevision => "52".into(),
			HapType::HardwareRevision => "53".into(),
			HapType::HeatingThresholdTemperature => "12".into(),
			HapType::HoldPosition => "6F".into(),
			HapType::Hue => "13".into(),
			HapType::Identify => "14".into(),
			HapType::InputSourceType => "DB".into(),
			HapType::InputDeviceType => "DC".into(),
			HapType::Identifier => "E6".into(),
			HapType::CurrentVisibilityState => "135".into(),
			HapType::TargetVisibilityState => "134".into(),
			HapType::ImageMirroring => "11F".into(),
			HapType::ImageRotation => "11E".into(),
			HapType::InUse => "D2".into(),
			HapType::IsConfigured => "D6".into(),
			HapType::LeakDetected => "70".into(),
			HapType::LockControlPoint => "19".into(),
			HapType::LockCurrentState => "1D".into(),
			HapType::LockLastKnownAction => "1C".into(),
			HapType::LockManagementAutoSecurityTimeout => "1A".into(),
			HapType::LockPhysicalControls => "A7".into(),
			HapType::LockTargetState => "1E".into(),
			HapType::Logs => "1F".into(),
			HapType::Manufacturer => "20".into(),
			HapType::Model => "21".into(),
			HapType::MotionDetected => "22".into(),
			HapType::Mute => "11A".into(),
			HapType::Name => "23".into(),
			HapType::NightVision => "11B".into(),
			HapType::NitrogenDioxideDensity => "C4".into(),
			HapType::ObstructionDetected => "24".into(),
			HapType::OccupancyDetected => "71".into(),
			HapType::On => "25".into(),
			HapType::OpticalZoom => "11C".into(),
			HapType::OutletInUse => "26".into(),
			HapType::OzoneDensity => "C3".into(),
			HapType::PairSetup => "4C".into(),
			HapType::PairVerify => "4E".into(),
			HapType::PairingFeatures => "4F".into(),
			HapType::PairingPairings => "50".into(),
			HapType::Pm10Density => "C7".into(),
			HapType::Pm2_5Density => "C6".into(),
			HapType::PositionState => "72".into(),
			HapType::PictureMode => "E2".into(),
			HapType::PowerModeSelection => "DF".into(),
			HapType::ProgramMode => "D1".into(),
			HapType::ProgrammableSwitchEvent => "73".into(),
			HapType::RemoteKey => "E1".into(),
			HapType::RelativeHumidityDehumidifierThreshold => "C9".into(),
			HapType::RelativeHumidityHumidifierThreshold => "CA".into(),
			HapType::RemainingDuration => "D4".into(),
			HapType::ResetFilterIndication => "AD".into(),
			HapType::RotationDirection => "28".into(),
			HapType::RotationSpeed => "29".into(),
			HapType::Saturation => "2F".into(),
			HapType::SecuritySystemAlarmType => "8E".into(),
			HapType::SecuritySystemCurrentState => "66".into(),
			HapType::SecuritySystemTargetState => "67".into(),
			HapType::SelectedRtpStreamConfiguration => "117".into(),
			HapType::SerialNumber => "30".into(),
			HapType::ServiceLabelIndex => "CB".into(),
			HapType::ServiceLabelNamespace => "CD".into(),
			HapType::SetDuration => "D3".into(),
			HapType::SetupEndpoints => "118".into(),
			HapType::SlatType => "C0".into(),
			HapType::SleepDiscoveryMode => "E8".into(),
			HapType::SmokeDetected => "76".into(),
			HapType::StatusActive => "75".into(),
			HapType::StatusFault => "77".into(),
			HapType::StatusJammed => "78".into(),
			HapType::StatusLowBattery => "79".into(),
			HapType::StatusTampered => "7A".into(),
			HapType::StreamingStatus => "120".into(),
			HapType::SulphurDioxideDensity => "C5".into(),
			HapType::SupportedAudioStreamConfiguration => "115".into(),
			HapType::SupportedRtpConfiguration => "116".into(),
			HapType::SupportedVideoStreamConfiguration => "114".into(),
			HapType::SwingMode => "B6".into(),
			HapType::TargetAirPurifierState => "A8".into(),
			HapType::TargetAirQuality => "AE".into(),
			HapType::TargetDoorState => "32".into(),
			HapType::TargetFanState => "BF".into(),
			HapType::TargetHeaterCoolerState => "B2".into(),
			HapType::TargetHeatingCoolingState => "33".into(),
			HapType::TargetHorizontalTiltAngle => "7B".into(),
			HapType::TargetHumidifierDehumidifierState => "B4".into(),
			HapType::TargetPosition => "7C".into(),
			HapType::TargetRelativeHumidity => "34".into(),
			HapType::TargetSlatState => "BE".into(),
			HapType::TargetTemperature => "35".into(),
			HapType::TargetTiltAngle => "C2".into(),
			HapType::TargetVerticalTiltAngle => "7D".into(),
			HapType::TemperatureDisplayUnits => "36".into(),
			HapType::ValveType => "D5".into(),
			HapType::Version => "37".into(),
			HapType::VocDensity => "C8".into(),
			HapType::Volume => "119".into(),
			HapType::VolumeControlType => "E9".into(),
			HapType::VolumeSelector => "EA".into(),
			HapType::WaterLevel => "B5".into(),
			HapType::SupportedCameraRecordingConfiguration => "205".into(),
			HapType::SupportedVideoRecordingConfiguration => "206".into(),
			HapType::SupportedAudioRecordingConfiguration => "207".into(),
			HapType::SelectedCameraRecordingConfiguration => "209".into(),
			HapType::AccessoryInformation => "3E".into(),
			HapType::AirPurifier => "BB".into(),
			HapType::AirQualitySensor => "8D".into(),
			HapType::BatteryService => "96".into(),
			HapType::CameraRtpStreamManagement => "110".into(),
			HapType::CarbonDioxideSensor => "97".into(),
			HapType::CarbonMonoxideSensor => "7F".into(),
			HapType::ContactSensor => "80".into(),
			HapType::Door => "81".into(),
			HapType::Doorbell => "121".into(),
			HapType::Fan => "40".into(),
			HapType::FanV2 => "B7".into(),
			HapType::FilterMaintenance => "BA".into(),
			HapType::Faucet => "D7".into(),
			HapType::GarageDoorOpener => "41".into(),
			HapType::HeaterCooler => "BC".into(),
			HapType::HumidifierDehumidifier => "BD".into(),
			HapType::HumiditySensor => "82".into(),
			HapType::IrrigationSystem => "CF".into(),
			HapType::LeakSensor => "83".into(),
			HapType::LightSensor => "84".into(),
			HapType::Lightbulb => "43".into(),
			HapType::LockManagement => "44".into(),
			HapType::LockMechanism => "45".into(),
			HapType::Microphone => "112".into(),
			HapType::MotionSensor => "85".into(),
			HapType::OccupancySensor => "86".into(),
			HapType::Outlet => "47".into(),
			HapType::SecuritySystem => "7E".into(),
			HapType::ServiceLabel => "CC".into(),
			HapType::Slat => "B9".into(),
			HapType::SmokeSensor => "87".into(),
			HapType::Speaker => "113".into(),
			HapType::StatelessProgrammableSwitch => "89".into(),
			HapType::Switch => "49".into(),
			HapType::TemperatureSensor => "8A".into(),
			HapType::Thermostat => "4A".into(),
			HapType::Valve => "D0".into(),
			HapType::Window => "8B".into(),
			HapType::WindowCovering => "8C".into(),
			HapType::Television => "D8".into(),
			HapType::InputSource => "D9".into(),
		}
    }
}

impl FromStr for HapType {
    type Err = Error;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "unknown" => Ok(HapType::Unknown),
			"A6" => Ok(HapType::AccessoryFlags),
			"B0" => Ok(HapType::Active),
			"E7" => Ok(HapType::ActiveIdentifier),
			"1" => Ok(HapType::AdministratorOnlyAccess),
			"64" => Ok(HapType::AirParticulateDensity),
			"65" => Ok(HapType::AirParticulateSize),
			"95" => Ok(HapType::AirQuality),
			"5" => Ok(HapType::AudioFeedback),
			"68" => Ok(HapType::BatteryLevel),
			"8" => Ok(HapType::Brightness),
			"92" => Ok(HapType::CarbonDioxideDetected),
			"93" => Ok(HapType::CarbonDioxideLevel),
			"94" => Ok(HapType::CarbonDioxidePeakLevel),
			"69" => Ok(HapType::CarbonMonoxideDetected),
			"90" => Ok(HapType::CarbonMonoxideLevel),
			"91" => Ok(HapType::CarbonMonoxidePeakLevel),
			"8F" => Ok(HapType::ChargingState),
			"DD" => Ok(HapType::ClosedCaptions),
			"E3" => Ok(HapType::ConfiguredName),
			"136" => Ok(HapType::DisplayOrder),
			"CE" => Ok(HapType::ColorTemperature),
			"6A" => Ok(HapType::ContactSensorState),
			"D" => Ok(HapType::CoolingThresholdTemperature),
			"A9" => Ok(HapType::CurrentAirPurifierState),
			"6B" => Ok(HapType::CurrentAmbientLightLevel),
			"E" => Ok(HapType::CurrentDoorState),
			"AF" => Ok(HapType::CurrentFanState),
			"B1" => Ok(HapType::CurrentHeaterCoolerState),
			"F" => Ok(HapType::CurrentHeatingCoolingState),
			"6C" => Ok(HapType::CurrentHorizontalTiltAngle),
			"B3" => Ok(HapType::CurrentHumidifierDehumidifierState),
			"E0" => Ok(HapType::CurrentMediaState),
			"137" => Ok(HapType::TargetMediaState),
			"6D" => Ok(HapType::CurrentPosition),
			"10" => Ok(HapType::CurrentRelativeHumidity),
			"AA" => Ok(HapType::CurrentSlatState),
			"11" => Ok(HapType::CurrentTemperature),
			"C1" => Ok(HapType::CurrentTiltAngle),
			"6E" => Ok(HapType::CurrentVerticalTiltAngle),
			"11D" => Ok(HapType::DigitalZoom),
			"AC" => Ok(HapType::FilterChangeIndication),
			"AB" => Ok(HapType::FilterLifeLevel),
			"52" => Ok(HapType::FirmwareRevision),
			"53" => Ok(HapType::HardwareRevision),
			"12" => Ok(HapType::HeatingThresholdTemperature),
			"6F" => Ok(HapType::HoldPosition),
			"13" => Ok(HapType::Hue),
			"14" => Ok(HapType::Identify),
			"DB" => Ok(HapType::InputSourceType),
			"DC" => Ok(HapType::InputDeviceType),
			"E6" => Ok(HapType::Identifier),
			"135" => Ok(HapType::CurrentVisibilityState),
			"134" => Ok(HapType::TargetVisibilityState),
			"11F" => Ok(HapType::ImageMirroring),
			"11E" => Ok(HapType::ImageRotation),
			"D2" => Ok(HapType::InUse),
			"D6" => Ok(HapType::IsConfigured),
			"70" => Ok(HapType::LeakDetected),
			"19" => Ok(HapType::LockControlPoint),
			"1D" => Ok(HapType::LockCurrentState),
			"1C" => Ok(HapType::LockLastKnownAction),
			"1A" => Ok(HapType::LockManagementAutoSecurityTimeout),
			"A7" => Ok(HapType::LockPhysicalControls),
			"1E" => Ok(HapType::LockTargetState),
			"1F" => Ok(HapType::Logs),
			"20" => Ok(HapType::Manufacturer),
			"21" => Ok(HapType::Model),
			"22" => Ok(HapType::MotionDetected),
			"11A" => Ok(HapType::Mute),
			"23" => Ok(HapType::Name),
			"11B" => Ok(HapType::NightVision),
			"C4" => Ok(HapType::NitrogenDioxideDensity),
			"24" => Ok(HapType::ObstructionDetected),
			"71" => Ok(HapType::OccupancyDetected),
			"25" => Ok(HapType::On),
			"11C" => Ok(HapType::OpticalZoom),
			"26" => Ok(HapType::OutletInUse),
			"C3" => Ok(HapType::OzoneDensity),
			"4C" => Ok(HapType::PairSetup),
			"4E" => Ok(HapType::PairVerify),
			"4F" => Ok(HapType::PairingFeatures),
			"50" => Ok(HapType::PairingPairings),
			"C7" => Ok(HapType::Pm10Density),
			"C6" => Ok(HapType::Pm2_5Density),
			"72" => Ok(HapType::PositionState),
			"E2" => Ok(HapType::PictureMode),
			"DF" => Ok(HapType::PowerModeSelection),
			"D1" => Ok(HapType::ProgramMode),
			"73" => Ok(HapType::ProgrammableSwitchEvent),
			"E1" => Ok(HapType::RemoteKey),
			"C9" => Ok(HapType::RelativeHumidityDehumidifierThreshold),
			"CA" => Ok(HapType::RelativeHumidityHumidifierThreshold),
			"D4" => Ok(HapType::RemainingDuration),
			"AD" => Ok(HapType::ResetFilterIndication),
			"28" => Ok(HapType::RotationDirection),
			"29" => Ok(HapType::RotationSpeed),
			"2F" => Ok(HapType::Saturation),
			"8E" => Ok(HapType::SecuritySystemAlarmType),
			"66" => Ok(HapType::SecuritySystemCurrentState),
			"67" => Ok(HapType::SecuritySystemTargetState),
			"117" => Ok(HapType::SelectedRtpStreamConfiguration),
			"30" => Ok(HapType::SerialNumber),
			"CB" => Ok(HapType::ServiceLabelIndex),
			"CD" => Ok(HapType::ServiceLabelNamespace),
			"D3" => Ok(HapType::SetDuration),
			"118" => Ok(HapType::SetupEndpoints),
			"C0" => Ok(HapType::SlatType),
			"E8" => Ok(HapType::SleepDiscoveryMode),
			"76" => Ok(HapType::SmokeDetected),
			"75" => Ok(HapType::StatusActive),
			"77" => Ok(HapType::StatusFault),
			"78" => Ok(HapType::StatusJammed),
			"79" => Ok(HapType::StatusLowBattery),
			"7A" => Ok(HapType::StatusTampered),
			"120" => Ok(HapType::StreamingStatus),
			"C5" => Ok(HapType::SulphurDioxideDensity),
			"115" => Ok(HapType::SupportedAudioStreamConfiguration),
			"116" => Ok(HapType::SupportedRtpConfiguration),
			"114" => Ok(HapType::SupportedVideoStreamConfiguration),
			"B6" => Ok(HapType::SwingMode),
			"A8" => Ok(HapType::TargetAirPurifierState),
			"AE" => Ok(HapType::TargetAirQuality),
			"32" => Ok(HapType::TargetDoorState),
			"BF" => Ok(HapType::TargetFanState),
			"B2" => Ok(HapType::TargetHeaterCoolerState),
			"33" => Ok(HapType::TargetHeatingCoolingState),
			"7B" => Ok(HapType::TargetHorizontalTiltAngle),
			"B4" => Ok(HapType::TargetHumidifierDehumidifierState),
			"7C" => Ok(HapType::TargetPosition),
			"34" => Ok(HapType::TargetRelativeHumidity),
			"BE" => Ok(HapType::TargetSlatState),
			"35" => Ok(HapType::TargetTemperature),
			"C2" => Ok(HapType::TargetTiltAngle),
			"7D" => Ok(HapType::TargetVerticalTiltAngle),
			"36" => Ok(HapType::TemperatureDisplayUnits),
			"D5" => Ok(HapType::ValveType),
			"37" => Ok(HapType::Version),
			"C8" => Ok(HapType::VocDensity),
			"119" => Ok(HapType::Volume),
			"E9" => Ok(HapType::VolumeControlType),
			"EA" => Ok(HapType::VolumeSelector),
			"B5" => Ok(HapType::WaterLevel),
			"205" => Ok(HapType::SupportedCameraRecordingConfiguration),
			"206" => Ok(HapType::SupportedVideoRecordingConfiguration),
			"207" => Ok(HapType::SupportedAudioRecordingConfiguration),
			"209" => Ok(HapType::SelectedCameraRecordingConfiguration),
			"3E" => Ok(HapType::AccessoryInformation),
			"BB" => Ok(HapType::AirPurifier),
			"8D" => Ok(HapType::AirQualitySensor),
			"96" => Ok(HapType::BatteryService),
			"110" => Ok(HapType::CameraRtpStreamManagement),
			"97" => Ok(HapType::CarbonDioxideSensor),
			"7F" => Ok(HapType::CarbonMonoxideSensor),
			"80" => Ok(HapType::ContactSensor),
			"81" => Ok(HapType::Door),
			"121" => Ok(HapType::Doorbell),
			"40" => Ok(HapType::Fan),
			"B7" => Ok(HapType::FanV2),
			"BA" => Ok(HapType::FilterMaintenance),
			"D7" => Ok(HapType::Faucet),
			"41" => Ok(HapType::GarageDoorOpener),
			"BC" => Ok(HapType::HeaterCooler),
			"BD" => Ok(HapType::HumidifierDehumidifier),
			"82" => Ok(HapType::HumiditySensor),
			"CF" => Ok(HapType::IrrigationSystem),
			"83" => Ok(HapType::LeakSensor),
			"84" => Ok(HapType::LightSensor),
			"43" => Ok(HapType::Lightbulb),
			"44" => Ok(HapType::LockManagement),
			"45" => Ok(HapType::LockMechanism),
			"112" => Ok(HapType::Microphone),
			"85" => Ok(HapType::MotionSensor),
			"86" => Ok(HapType::OccupancySensor),
			"47" => Ok(HapType::Outlet),
			"7E" => Ok(HapType::SecuritySystem),
			"CC" => Ok(HapType::ServiceLabel),
			"B9" => Ok(HapType::Slat),
			"87" => Ok(HapType::SmokeSensor),
			"113" => Ok(HapType::Speaker),
			"89" => Ok(HapType::StatelessProgrammableSwitch),
			"49" => Ok(HapType::Switch),
			"8A" => Ok(HapType::TemperatureSensor),
			"4A" => Ok(HapType::Thermostat),
			"D0" => Ok(HapType::Valve),
			"8B" => Ok(HapType::Window),
			"8C" => Ok(HapType::WindowCovering),
			"D8" => Ok(HapType::Television),
			"D9" => Ok(HapType::InputSource),
			_ => Err(Error::InvalidHapTypeString(s.to_string())),
		}
    }
}

impl Default for HapType {
    fn default() -> HapType { HapType::Unknown }
}

impl<'de> Deserialize<'de> for HapType {
    fn deserialize<D>(deserializer: D) -> Result<HapType, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        let hap_type = HapType::from_str(&s).map_err(de::Error::custom)?;
        Ok(hap_type)
    }
}

impl Serialize for HapType {
    fn serialize<S: Serializer>(&self, serializer: S) -> Result<S::Ok, S::Error> {
        serializer.serialize_str(&self.to_string())
    }
}
